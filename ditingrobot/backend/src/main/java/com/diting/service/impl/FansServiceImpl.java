package com.diting.service.impl;import com.diting.core.Universe;import com.diting.dao.*;import com.diting.model.*;import com.diting.model.options.FansOptions;import com.diting.model.result.Flag;import com.diting.model.result.Results;import com.diting.service.AccountService;import com.diting.service.FansService;import org.apache.http.util.TextUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import static com.diting.util.Utils.isEmpty;@SuppressWarnings("ALL")@Service("FansService")@Transactionalpublic class FansServiceImpl implements FansService {    @Autowired    private FansMapper fansMapper;    @Autowired    private AccountService accountService;    @Autowired    private RobotMapper robotMapper;    @Autowired    private CompanyMapper companyMapper;    @Autowired    private ChatStatisticsMapper chatStatisticsMapper;    @Override    public Flag save_fans(Fans fans) {        int name = Universe.current().getUserId();        fans.setOwn_phone(String.valueOf(name));        //设置每个用户只能关注20个 查询自己关注数        List<Fans> lists = fansMapper.find_fans_owner(fans);        Flag f = new Flag();        if(lists.size()<20){            if(fansMapper.search_fans_flg(fans).isEmpty()) {                fansMapper.save_fans(fans);                lists.add(fans);            }else {                f.setFlg(2);            }            f.setFlg_count(lists.size());            return f;        }else {            f.setFlg_count(lists.size());            f.setFlg(1);            return f;        }////        if(lists.size()<21){//            fansMapper.save_fans(fans);//            //保存成功以后 查询关注人数值//            List<Fans> list = fansMapper.find_fans(fans);//            Flag f = new Flag();//            f.setFlg_count(list.size());//            return f;//        }else{//            //保存成功以后 查询关注人数值//            List<Fans> list = fansMapper.find_fans(fans);//            Flag f = new Flag();//            f.setFlg_count(list.size());//            f.setFlg(1);//            return f;//        }    }    @Override    public Flag del_fans(Fans fans) {        int name = Universe.current().getUserId();        fans.setOwn_phone(String.valueOf(name));        fansMapper.del_fans(fans);        //删除以后 查询关注人数        List<Fans> list = fansMapper.find_fans(fans);        Flag f = new Flag();        f.setFlg_count(list.size());        return f;    }    @Override    public Flag find_fans(Fans fans) {        try {            int name = Universe.current().getUserId();            fans.setOwn_phone(String.valueOf(name));            List<Fans> list = fansMapper.search_fans_flg(fans);            List<Fans> list1 = fansMapper.find_fans(fans);            Flag f = new Flag();            f.setFlg_count(list1.size());            if(list.size()>0){                f.setFlg(1);            }else{                f.setFlg(0);            }            return f;        } catch (Exception e) {//            int name = Universe.current().getUserId();//            fans.setOwn_phone(String.valueOf(name));            Flag f = new Flag();            List<Fans> lists = fansMapper.find_fans(fans);            f.setFlg(3);            f.setFlg_count(lists.size());            return f;        }    }    public List<Fans> search_fans_count(Fans fans) {        int name = Universe.current().getUserId();//        if (isEmpty(Universe.current().getUserName())){//            name= Integer.parseInt(fans.getOth_phone());//        }        fans.setOwn_phone(String.valueOf(name));        return fansMapper.search_fans_count(fans);    }    @Override    public List<Fans> search_fans() {        // int name = Universe.current().getUserId();        //fans.setOwn_phone(String.valueOf(name));        return fansMapper.search_fans();    }    @Override    public java.util.List<Fans> search_count_fans() {        Fans fans = new Fans();        int name = Universe.current().getUserId();        fans.setOwn_phone(String.valueOf(name));        //查询自己  关注用户 的粉丝数 和关注用户的消息信息        java.util.List<Fans>  fan = fansMapper.search_count_fans(fans);        for(int i = 0; i<fan.size(); i++){            String ow = fan.get(i).getOth_phone();            Fans fansss = new Fans();            fansss.setOwn_phone(ow);            java.util.List<Fans>  fanfan = fansMapper.search_count_fans(fansss);            Fans  fanfan_com =fansMapper.search_fans_compy(fansss);            if(fanfan_com == null){                fan.get(i).setRobot_name(null);                fan.get(i).setCompany_name(null);                fan.get(i).setUpdatedBy(null);            }else{                fan.get(i).setRobot_name(fanfan_com.getRobot_name() == null?null:fanfan_com.getRobot_name());                fan.get(i).setCompany_name(fanfan_com.getCompany_name() == null?null:fanfan_com.getCompany_name());                fan.get(i).setUpdatedBy(fanfan_com.getOwn_phone()  == null?null:fanfan_com.getOwn_phone());            }            fan.get(i).setOwnerType(fanfan.size()); }        return fan;    }    @Override    public java.util.List<Fans> search_concern_list() {        Fans fans = new Fans();        int name = Universe.current().getUserId();        fans.setOwn_phone(String.valueOf(name));        //查询自己  关注用户 的粉丝数 和关注用户的消息信息        java.util.List<Fans>  fan = fansMapper.search_count_fans(fans);        for(int i = 0; i<fan.size(); i++){            int count = search_my_fans(fan.get(i)).size();            Account account = accountService.get(Integer.parseInt(fan.get(i).getOwn_phone()));            String img_url = account.getHeadImgUrl();            if(!TextUtils.isEmpty(img_url)) {                fan.get(i).setHeadImgUrl(img_url);            }            fan.get(i).setUserName(account.getUserName());            fan.get(i).setOwnerType(count);        }        return fan;    }    @Override    public java.util.List<Fans> search_my_fans(Fans fans){        //查询用户的粉丝数        java.util.List<Fans>  fan = fansMapper.search_my_fans(fans);        return fan;    }    @Override    public Integer find_fans_count(Fans fans) {        return fansMapper.find_fans_count(fans);    }    @Override    public Results<Fans> findFansByLogin(FansOptions options) {        Results results = new Results();        Integer userId=Universe.current().getUserId();        options.setOwn_phone(String.valueOf(userId));        List<Fans> fansList=fansMapper.search_my_fansForPage(options);        results.setTotal(options.getTotalRecord());        for (Fans fans1:fansList){            Fans fans=new Fans();            fans.setOwn_phone(fans1.getOth_phone());            List<Fans> fansList1=fansMapper.search_my_fans(fans);            Account account=accountService.get(Integer.valueOf(fans1.getOth_phone()));            Robot robot=robotMapper.getByUserId(Integer.valueOf(fans1.getOth_phone()));            Company company=companyMapper.get(account.getCompanyId());            if (null!=robot){                fans1.setWelcome(robot.getWelcomes());                fans1.setRobot_name(robot.getName());            }            if (null!=company){                ChatStatistics chatStatistics=chatStatisticsMapper.findByCompanyId(company.getId());                fans1.setRobotValue(chatStatistics.getRobotValue());                fans1.setCompany_name(company.getName());            }            if (null!=account){                fans1.setHeadImgUrl(account.getHeadImgUrl());                fans1.setUserName(account.getUserName());                fans1.setUserId(account.getId());            }            if (null!=fansList1){                fans1.setFansNum(fansList1.size());                fans1.setAttentionState("false");                for (Fans fans11:fansList1) {                    if (!isEmpty(fans11.getOth_phone())&&fans11.getOth_phone().equals(String.valueOf(userId))){                        fans1.setAttentionState("true");                    }                }            }        }        results.setItems(fansList);        return results;    }    @Override    public Fans searchFansByUserId(Integer ownUserId, Integer othUserId) {        return fansMapper.searchFansByUserId(ownUserId,othUserId);    }}